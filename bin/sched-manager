#!/usr/bin/env php
<?php

declare(strict_types=1);

use DI\Container;
use DI\ContainerBuilder;
use Dragonmantank\Sched\Command\ForceProcessCron;
use Dragonmantank\Sched\Command\GetCronInfo;
use Dragonmantank\Sched\Command\GetQueueStats;
use Dragonmantank\Sched\Command\ProcessCron;
use Dragonmantank\Sched\Command\ProcessQueue;
use Dragonmantank\Sched\Command\QueueAddJob;
use Dragonmantank\Sched\Command\QueueClear;
use Dragonmantank\Sched\Command\QueuePeek;
use Dragonmantank\Sched\Command\RunManager;
use Dragonmantank\Sched\Component\Console\Application;
use Pheanstalk\Pheanstalk;
use Psr\Log\LoggerInterface;

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

$builder = new ContainerBuilder();
$builder->useAnnotations(true);
$builder->addDefinitions(__DIR__ . '/../config/di.php');
$container = $builder->build();

$application = new Application();
$application->add($container->get(RunManager::class));
$application->add($container->get(ProcessQueue::class));
$application->add($container->get(ForceProcessCron::class));
$application->add($container->get(GetQueueStats::class));
$application->add($container->get(QueuePeek::class));
$application->add($container->get(QueueClear::class));
$application->add($container->get(ProcessCron::class));
$application->add($container->get(GetCronInfo::class));
$application->add($container->get(QueueAddJob::class));

$config = $container->get('config');
if (isset($config['custom_commands'])) {
    foreach ($config['custom_commands'] as $className) {
        $application->add($container->get($className));
    }
}


$application->run();
